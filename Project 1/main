{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\dkell\\AppData\\Local\\Programs\\Python\\Python312\\python.exe: No module named pip\n"
     ]
    }
   ],
   "source": [
    "# Load in packages\n",
    "%pip install seaborn\n",
    "import numpy as np \n",
    "import matplotlib as plt \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import scipy as sp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#-----------\n",
    "# Problem 1\n",
    "#-----------\n",
    "\n",
    "\n",
    "# Part 1a) Calculate log( 1 + exp(x) ), with base e the naive way.\n",
    "def log1pe(x):\n",
    "    return np.log1p(np.exp(x))\n",
    "\n",
    "\n",
    "# Plot the results of log1pe() for x in [-5,5]   \n",
    "\n",
    "xs_1pe = np.linspace(-5,5,1000)    \n",
    "ys_1pe = np.array([log1pe(x) for x in xs_1pe])\n",
    "\n",
    "plt.plot(xs_1pe, ys_1pe)\n",
    "plt.xlabel('x', fontsize = 16)\n",
    "plt.ylabel(r'$\\log(1+e^x)$', fontsize = 16)\n",
    "plt.title('Plot of ' + r'$\\log(1+e^x)$', fontsize = 16)\n",
    "sns.despine()\n",
    "plt.show()\n",
    "\n",
    "# Modified plot with soft-plus. It is called soft-plus as it forces all outputs to be positive, neglecting negative x's. \n",
    "\n",
    "xs = np.linspace(-5,5,1000)    \n",
    "ys_pos = np.array([max(0,x) for x in xs])\n",
    "\n",
    "plt.plot(xs, ys_pos, label='Soft-max function')\n",
    "plt.plot(xs, ys_1pe, label=r'$\\log(1+e^x)$')\n",
    "plt.xlabel('x', fontsize = 16)\n",
    "plt.title('Plot of ' + r'$\\log(1+e^x)$'+ ' and Soft-max', fontsize = 16)\n",
    "sns.despine()\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "log1pe(0) =  0.6931471805599453\n",
      "log1pe(-80) =  1.8048513878454153e-35\n",
      "log1pe(80) =  80.0\n",
      "log1pe(800) =  inf\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dkell\\AppData\\Local\\Temp\\ipykernel_1916\\971596508.py:8: RuntimeWarning: overflow encountered in exp\n",
      "  return np.log1p(np.exp(x))\n"
     ]
    }
   ],
   "source": [
    "# Part 1b) \n",
    "\n",
    "print('log1pe(0) = ',  log1pe(0) )\n",
    "print('log1pe(-80) = ',  log1pe(-80) )\n",
    "print('log1pe(80) = ',  log1pe(80) )\n",
    "print('log1pe(800) = ',  log1pe(800) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that for small magnitudes of $x$, $x$ in approximately [0,5], the function $\\texttt{log1pe()}$ calculates $\\log(1 + e^x)$ with high accuracy. For $x = 800$, we return a value of $\\texttt{inf}$ ($\\infty$), which is reasonable since $\\exp(800)$ is a very large number, one that our computer does not have enough space to store. To calculate the desired quanitity for large values of $x$, we must modify our function. In addition, we see that $\\texttt{log1pe(-80)} = 1.8048513878454153\\times 10^{-35} \\approx 0$, which makes sense as $\\log(1 + e^x) \\overset{x\\to-\\infty}{\\longrightarrow} \\log(1)=0$. We find that $\\texttt{log1pe(80)} = 80$, which is an approximation that is reasoble given that $\\log(1+e^x) \\approx x$ for large $x.$ \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\textbf{Problem 1 c)}$\n",
    "\n",
    "To avoid computations with $|x|>> 0$ using the machine epsilon, we will check whether the value of $x$ is valid before doing our computation by computing\n",
    "the machine eplison with: $\\texttt{eps = np.finfo(float).eps}$ \n",
    "\n",
    "Then, in $\\texttt{log1pe()}$ we would first check before doing calculations that: $x < \\text{-}\\log(2\\times\\texttt{eps})$ \n",
    "If this fails, tell the user input is invalid. Our updated function $\\texttt{log1peaccurate()}$ below reflects this change.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\textbf{Problem 1 d)}$\n",
    "\n",
    "As hinted at in the project description, we have that \n",
    "\\begin{align*} \\log(1+e^x) &= \\log( e^x \\times( e^{\\text{-}x} + 1 ) ) \\\\\n",
    "&= \\log(e^x) + \\log(1+e^{\\text{-}x})\\\\\n",
    "&= x + \\log(1 + e^{\\text{-}x}) \\\\\n",
    "&\\approx x \\hspace{.1cm} \\text{for large x,}\n",
    "\\end{align*}\n",
    "as $e^{\\text{-}x} \\approx 0$ and $\\log(1) = 0.$ In Mächler, 2015, they provide evidence that $x > 33.3$ is a reasonable cutoff for which approximating $\\log(1+e^x)$ with $x$ is appropriate (the result has low enough error). So, in our new implementation of $\\texttt{log1pe}$ we will simply approximate $\\log(1+e^x)$ with the value of $x$ for $x > 33.3$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "log1pe_accurate(0)= [0.69314718]\n",
      "log1pe_accurate(-80)= [0.69314718]\n",
      "log1pe_accurate(80)= [80.]\n",
      "log1pe_accurate(800)= [800.]\n"
     ]
    }
   ],
   "source": [
    "# Part 1e) \n",
    "# Corrected log1pe():\n",
    "\n",
    "def log1pe_accurate(x):\n",
    "    x = np.atleast_1d(x)\n",
    "    if np.any(x < 0):\n",
    "        epsilon = np.finfo(float).eps\n",
    "        threshold = -np.log(2 * epsilon)\n",
    "        below_threshold = x < threshold\n",
    "        x[below_threshold] = 0\n",
    "    if np.all(x <= 18):\n",
    "        return np.log1p(np.exp(x))\n",
    "    else:\n",
    "        return x + np.log(1 + np.exp(-x))\n",
    "\n",
    "print('log1pe_accurate(0)=',  log1pe_accurate(0))\n",
    "print('log1pe_accurate(-80)=',  log1pe_accurate(-80))\n",
    "print('log1pe_accurate(80)=',  log1pe_accurate(80))\n",
    "print('log1pe_accurate(800)=',  log1pe_accurate(800))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function lse2() that computes sums of inputs x, y `in the log space.` That is, lse2(x,y) = log( exp(x) + exp(y) ).\n",
    "# It works well for x >> 0 and for x << 0 it avoids computation, but it does not closely approximate for x near 0.\n",
    "\n",
    "def lse2(x, y):\n",
    "    if np.any(x < 0) or np.any(y < 0):\n",
    "        epsilon = np.finfo(float).eps\n",
    "        threshold = -np.log(2 * epsilon)\n",
    "        if np.any(x < threshold) or np.any(y < threshold):\n",
    "            return 0\n",
    "    max_val = max(np.max(x), np.max(y))\n",
    "    vals = np.array([x, y])\n",
    "    exp_vals = np.exp(vals - max_val)\n",
    "    intermediate_result = log1pe_accurate(exp_vals-1).sum(axis=0)\n",
    "    return (max_val + log1pe_accurate(np.exp(intermediate_result)))[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lse(rep(800, 10)) = 804.0181499279178\n",
      "Approximation Residual =  1.7155648349237733\n",
      "Test Case 1:\n",
      "Output: 3\n",
      "Test Case 2:\n",
      "Output: 804.0181499279178\n"
     ]
    }
   ],
   "source": [
    "# Part 1f) \n",
    "# The lse() function below takes in a vector x of length n and computes the logsumexp of the components.\n",
    "# It is a generalization of lse2() to any number of summands \n",
    "\n",
    "def lse(x):\n",
    "    if min(x) > -37:\n",
    "        max_x = max(x)\n",
    "        return (max_x + lse2(x - max_x, np.zeros_like(x)))\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "print('lse(rep(800, 10)) =',  lse(np.array([800,800,800,800,800,800,800,800,800,800])))\n",
    "print('Approximation Residual = ',  (lse(np.array([800,800,800,800,800,800,800,800,800,800])- sp.special.logsumexp(np.array([800,800,800,800,800,800,800,800,800,800])))))\n",
    "\n",
    "# Test cases\n",
    "x1 = np.array([1, 2, 3])\n",
    "print(\"Test Case 1:\")\n",
    "print(\"Output:\", lse(x1))\n",
    "\n",
    "x2 = np.array([800, 800, 800, 800, 800, 800, 800, 800, 800, 800])\n",
    "print(\"Test Case 2:\")\n",
    "print(\"Output:\", lse(x2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lse(rep(800, 10)) = 804.0181499279178\n",
      "Approximation Residual =  1.7155648349237733\n",
      "Test Case 1:\n",
      "Output: 3\n",
      "Test Case 2:\n",
      "Output: 804.0181499279178\n"
     ]
    }
   ],
   "source": [
    "# Part 1f) \n",
    "# The lse() function below takes in a vector x of length n and computes the logsumexp of the components.\n",
    "# It is a generalization of lse2() to any number of summands \n",
    "\n",
    "def lse(x):\n",
    "    if min(x) > -37:\n",
    "        max_x = max(x)\n",
    "        return (max_x + lse2(x - max_x, np.zeros_like(x)))\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "print('lse(rep(800, 10)) =',  lse(np.array([800,800,800,800,800,800,800,800,800,800])))\n",
    "print('Approximation Residual = ',  (lse(np.array([800,800,800,800,800,800,800,800,800,800])- sp.special.logsumexp(np.array([800,800,800,800,800,800,800,800,800,800])))))\n",
    "\n",
    "# Test cases\n",
    "x1 = np.array([1, 2, 3])\n",
    "print(\"Test Case 1:\")\n",
    "print(\"Output:\", lse(x1))\n",
    "\n",
    "x2 = np.array([800, 800, 800, 800, 800, 800, 800, 800, 800, 800])\n",
    "print(\"Test Case 2:\")\n",
    "print(\"Output:\", lse(x2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#------------\n",
    "# Problem 2:\n",
    "#------------\n",
    "\n",
    "# Configuration of parameters:\n",
    "y = 96   # y = 0,..., 200\n",
    "m1 = 200\n",
    "m2 = 775\n",
    "s1 = 205\n",
    "a = max(0, s1-m2) # = 0\n",
    "b = min(m1, s1) # = 200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Helper function that computes log(nCk)\n",
    "def log_combs(n,k):\n",
    "    log_comb = sp.special.gammaln(n+1)  - sp.special.gammaln(k+1)   - sp.special.gammaln((n-k)+1)\n",
    "    return log_comb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p_theta(0)=  1.8544027500730508e+216\n",
      "p_theta(3)=  inf\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\dkell\\AppData\\Local\\Temp\\ipykernel_1916\\2156660549.py:5: RuntimeWarning: overflow encountered in exp\n",
      "  sum += np.exp(log_combs(m1, j) + log_combs(m2, s1-j) + theta * j)\n"
     ]
    }
   ],
   "source": [
    "# Function calculates the normalizing constant of the density for the non-central hypergeometric distribution. \n",
    "def p_theta(a, b, m1, m2, s1, theta):\n",
    "    sum = 0\n",
    "    for j in np.arange(a,b+1):\n",
    "        sum += np.exp(log_combs(m1, j) + log_combs(m2, s1-j) + theta * j)\n",
    "    return sum\n",
    "\n",
    "print('p_theta(0)= ',  p_theta(a,b, m1,m2,s1,0))\n",
    "print('p_theta(3)= ',  p_theta(a,b, m1,m2,s1,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remarks: When calculating $P_0(0)$, we return an extremely large postive number, approximately $1.85\\times 10^{216}.$ When calculating $P_3(0)$, we return $\\texttt{inf}$, indicating that our result is overflowing and leading to a bad loss of precision. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "log_p_theta(0)=  495.4184470733444\n",
      "log_p_theta(3)=  760.3639252448806\n",
      "log_density(y=96; theta = 0)=  -48.261055627298106\n",
      "f_0(y) =  1.097715635602756e-21\n",
      "log_density(y=96; theta = 3)=  -25.206533798834357\n",
      "f_0(3) =  1.1296436444565227e-11\n",
      "min(l(3;y), l(0,y)) =  -48.261055627298106\n"
     ]
    }
   ],
   "source": [
    "# Part 2b) \n",
    "\n",
    "def log_p_theta(k, m1, m2, s1, theta):\n",
    "    a = max(0, s1-m2) # = 0\n",
    "    b = min(m1, s1) # = 200\n",
    "    if k == 0:\n",
    "        exps = [( theta * j + log_combs(m1,j) + log_combs(m2, s1-j) ) for j in np.arange(a, b + 1)]\n",
    "        return lse(exps)\n",
    "    \n",
    "    else: # j = 0 => sum is zero\n",
    "        exps = [(theta * j +  np.log(j**k) + log_combs(m1, j) + log_combs(m2, s1 - j)) for j in np.arange(a+1, b + 1)] \n",
    "        return lse(exps)\n",
    "\n",
    "\n",
    "print('log_p_theta(0)= ',  log_p_theta(0, m1, m2, s1, 0))\n",
    "print('log_p_theta(3)= ',  log_p_theta(0,  m1, m2, s1, 3))\n",
    "\n",
    "# A function computing the log of the non-central hypegeometric density using log_p_theta()\n",
    "def log_density(m1, m2, s1, y, theta):\n",
    "    numer =log_combs(m1,y) + log_combs(m2, s1-y) + (theta*y) \n",
    "    denom = log_p_theta(0, m1, m2, s1, theta)\n",
    "    return numer - denom\n",
    "\n",
    "ld0 = log_density(m1, m2, s1, y, 0)\n",
    "ld3 = log_density(m1, m2, s1, y, 3)\n",
    "\n",
    "print('log_density(y=96; theta = 0)= ',  ld0)\n",
    "print('f_0(y) = ', np.exp(ld0))\n",
    "print('log_density(y=96; theta = 3)= ',  ld3)\n",
    "print('f_0(3) = ', np.exp(ld3))\n",
    "print('min(l(3;y), l(0,y)) = ', min(ld0,ld3) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remarks: Since $\\log f_0(y) < \\log f_3(y)$, we conclude that $\\theta = 3$ has a higher likelihod given the observed data $(\\exp(495) <  \\exp(760))$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(mu, var ; theta = 3) =  (133.99999999998724, 1.0037389673558565)\n"
     ]
    }
   ],
   "source": [
    "# Part c) \n",
    "# Function takes in a parameter theta and outputs a tuple containing the mean and varince of the distribution (mu, sigma^2).\n",
    "def moments(theta):\n",
    "    log_mu = log_p_theta(1, m1, m2, s1, theta) - log_p_theta(0, m1, m2, s1, theta)\n",
    "    log_var = log_p_theta(2, m1, m2, s1, theta) - log_p_theta(0, m1, m2, s1, theta) - 2*log_mu  \n",
    "    return np.exp(log_mu), np.exp(log_var)\n",
    "\n",
    "print('(mu, var ; theta = 3) = ',  moments(3))  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remarks: We notice that $\\mu$ and $\\sigma^2$ are approximately $134$ and $1$. The mean indicates that small y values like $y=96$ are unlikely since it is far from $y$, while the variance indicates that there is low variation about the mean. The majority of the timewe expect to observe values to be near the mean, which 96 is very far from. In other words, there is minimal support that $\\theta = 3$ based on the result of this calculation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "argmax_ll =  1.75\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Part d)\n",
    "\n",
    "\n",
    "# Function that graphs the log-likelihood for theta = 0, 0.05, 0.1, ..., 4. \n",
    "#\n",
    "# 1) Specify the parameters of the non-central hypergeometric distribution a, b, m1, m2, s1, y, (defined globally)\n",
    "# 2) Then specify the interval start, stop, and int_size to get the desired thetas \n",
    "# Example: start = 0, stop = 80, int_size = 0.05 gives the set of thetas\n",
    "# theta = {0, 0.05, 0.1, ..., 3.95, 4.0}\n",
    "\n",
    "start = 0\n",
    "stop = 4\n",
    "int_size = 0.05\n",
    "\n",
    "def ll_theta(m1, m2, s1, y, start, stop, int_size):\n",
    "    if int(stop/int_size) != (stop/int_size):\n",
    "        print('Invalid Input')\n",
    "    else:\n",
    "        t = start\n",
    "        theta_i = start\n",
    "        l_likelihoods = np.zeros([int(stop/int_size), 1])\n",
    "        for t in np.arange(int(stop/int_size) ):\n",
    "            l_likelihoods[t] = log_density(m1, m2, s1, y, theta_i)\n",
    "            theta_i += int_size\n",
    "        return l_likelihoods, np.argmax(l_likelihoods)\n",
    "\n",
    "xs_ll = np.linspace(start, stop , int(stop/int_size))    \n",
    "ys_ll, index_thetamax = ll_theta(m1, m2, s1, y, start, stop, int_size) \n",
    "print('argmax_ll = ', index_thetamax*int_size) # Warning: does not work for start != 0 \n",
    "\n",
    "plt.plot(xs_ll, ys_ll)\n",
    "plt.xlabel(r\"$\\theta$\", fontsize = 16)\n",
    "plt.ylabel(r\"$\\log f_{\\theta}(y)$\", fontsize = 16)\n",
    "plt.title('Plot of ' + r\"$\\log f_{\\theta}(y)$\", fontsize = 16)\n",
    "sns.despine()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(mu, var ; theta = 1.75) =  (97.00000000000068, 1.0)\n"
     ]
    }
   ],
   "source": [
    "# We will rerun momements(argmax_ll) to see whether there is evidence that y is 'typical' under theta = 1.75 (=armax_ll)\n",
    "\n",
    "print('(mu, var ; theta = 1.75) = ', moments(1.75))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remarks: Under the value of $\\theta$ that maximizes the log-likelihood, $\\theta = 1.75,$ we see that the mean and variance of the distribution are approximately $97$ and $1$, respectively. So, since $y=96$ is close to the mean, and given that the variance is 1, we conclude that that $y=96$ is \"typical\" under this parameterization of the density."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
